* Testing/Benchmarking
 - Could use an app that does weird things to test the framework.
 - Timing tests against QNX's RAM filesystem would be interesting.
 - Make RAM filesystem (optionally?) do double/quarter memory allocation.

* POSIX correctness:
 - does open honor O_EXCL if O_CREAT is requested?
 - totally missing any permissions checks on anything...
 - rdonly directory attribute respected on file creation/deletion?
 - what happens when a read/write bigger than VFIoMsg can accept occurs?
 - cannot run find on a vfsys:
     Cannot recurse into './vf' - filesystem forms an infinite loop
 - have to check eflag on an open, and reappend the trailing slash, or
   something.

* Permissions checking:
 - Need to do.
 - All service requests could include a pointer to info about the client
   (such as pid and psinfo3).
 - The client info object may be a good place to put permissions checks.

* Reimplement fd<->ocb mapping:
 x Use a resizable vector.

* Exiting:
 - Manager::Run() could return on rmdir/normal exit to allow cleanup, way
   more obvious than ~dtor magic (the other possibility).
 - OcbMap could keep ocb count, to EBUSY rmdirs when there are active clients.
 - does deleteing the manager recursively and correctly release all resources?

* Implement more interfaces:
 - unlink() (will need a link count in entities to support this)
 - execution (Proc uses special messages...)
 - utime()
 - chmod()
 - chown()
 - QNX Fsys directories support read() and write(). Should I? Why? How?

* Miscellany:
 - Move RAM file entity from vf_file to vf_ram.
 - Rewrite release target.
 x support sys/version message

Status:
 - none
 x done

