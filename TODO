
* Outright bugs
 - symlink paths are not being rewritten correctly: .../sl linked
   to 'dir/file' will work when in same directory as sl, not otherwise.
 - mounting inside a path on another machine fails
 - some tar files lack magic field, what to do? use is_tar.c

* Wanted features:
- unlink
- pop uidl mapping/delete
- tar ifx sucks

* Testing/Benchmarking
 - Could use an app that does weird things to test the framework.
 - Timing tests against QNX's RAM filesystem would be interesting.
 - Make vf_ram (optionally?) do double/quarter memory allocation.

* POSIX correctness:
 - does open honor O_EXCL if O_CREAT is requested?
 - totally missing any permissions checks on anything...
 - rdonly directory attribute respected on file creation/deletion?
 - have to check eflag on an open, and reappend the trailing slash, or
   something. (why? I should explain these things to myself...)

* Permissions checking:
 - Need to do.
 - All service requests could include a pointer to info about the client
   (such as pid and psinfo3).
 - The client info object may be a good place to put permissions checks.

* Exiting:
 - Manager::Run() could return on rmdir/normal exit to allow cleanup, way
   more obvious than ~dtor magic (the other possibility). This also
   contibutes to a bug where the team lead of a work team can't isn't killed.
 - In general, normal exit should be done through return, NOT exit.
 - OcbMap could keep ocb count, to EBUSY rmdirs when there are active clients.
 - does deleting the manager recursively and correctly release all resources?
   No, not yet...

* Implement more interfaces:
 - unlink() (will need a link count in entities to support this)
 - execution (Proc uses special messages...)
 - utime()
 - chmod()
 - chown()
 - QNX Fsys directories support read(). Should I? Why? How?

Status:
 - none
 x done

