* Rewrite release target.

* The ocb map could store a pointer to a OcbMapNode object that had the
reference counting stuff in it, leaving the Ocb pure abstract. this makes
sense, since the ocb doesn't need this stuff, it's an interface that
has some data inappropriately stuffed in that's convenient for the OcbMap.
But it's also pretty convenient...

* Consider providing defaults for the
dir/file specific methods (but not for generic ones like fstat()) that
correctly return ENOTDIR, or whatever is appropriate. The problem is
the correct errno depends on the type, for some of the calls. This means
having stat data, but I don't want data in the interface classes

* QNX Fsys directories support read() and write(). Should I? Why? How?

* Write an app that tests the file system...

* Make request pointers to Ocb methods "const" and reorganize ocb functions
into generic/file specific/dir specific.

* All methods should have the client pid as the first arg, its generally
  useful.

* Does open honor O_EXCL if O_CREAT is requested?

* qnx_fd_attach() ok with 32-bit pointers?

* Totally missing any permissions checks on anything...

* Handle unlink(). Will need a link count in entities to support this.

* MkSpecial() is wrong, it should push the creation request down through
the subdirs, allowing subdirs to handle their own entity creation, as they
should.

* Manager::Run() should return on rmdir/normal exit to allow cleanup, way
  more obvious than ~dtor magic.

* Do the work so that the VF can support execution.

* Make RAM filesystem (optionally?) do double/quatering memory allocation.

